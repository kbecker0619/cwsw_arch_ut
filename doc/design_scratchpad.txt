
"object" design for cwsw library

this is a scratchpad for ideation, not an official design document.
	tab chars: 4

udpate: 23-feb-2020

overall background:														{
* coded to C99, primarily because
	* i want to use the standardized scalar types not available in C90
	* i want to be free to use C++-style comments
* however, since VS 2010 doesn't know C99, some things "look" closer to C90
* packaged in one repo, though broken into separate components.
* UT and documentation apply at the package level.
}


event																	{
+== tEvQ_Event =============+
| evId:		tEvQ_EventID	|	scalar number, unambiguous identifier for "this" event.
| evData:	uint32_t		|	supplemental data to augment the context of the event.
+---------------------------+
| (no methods)				|
+===========================+

pEvQ_Event: tEvQ_Event *

discussion																{
tEvQ_EventID															{
*	project-specific alias for the underlying container type
	*	defined in `cwsw_event_proj.h`
*	recommended to be an unsigned integer type; early demonstration / unit testing code used U8s.
*	when using this component, be aware of data alignment issues; because the 1st field in the struct is the underlying type of the event ID, alignment may force the actual address of the data field to be located after some level of "gap".
	*	on some MCU architectures, it may be useful to make the underlying type to be the same as the natural register size; it may not "help" or be of any benefit to use a U8 to try to conserve data space.
*	recommended container for the list of available IDs is an enumeration; this is often implemented as a signed integer type.
	*	if the underlying container is an unsigned type, this could provoke some compiler or static analysis warnings
	*	in this case, make the definition of `tEvQ_EventID` to be the type of the enumeration.
	*	alternatively, the list of events could be composed of a series of define statements, with each value typecast to `tEvQ_EventID`
}

evData																	{
*	intended to be a generic container that will not affect bit patterns
*	not sized appropriately to pass an address on all architectures.
}
}
}


event table																{
+== tEvQ_EvTable ===========+
| pEvTable: pEvQ_Event	    |
| szEvTbl: int32_t			|
+---------------------------+
| Init()					|
| DeInit()					|
| Get_Initialized()			|
| InitEventTable()			|
| GetEventPtr()				|
| GetEvent()				|
| PutEvent()				|
+===========================+

pEvQ_EvTable: tEvQ_EvTable *

discussion																{
* simple container for a number of individual events.
* this could be a compile-time, ROM-based table.
}
}


event queue 															{
+== tEvQ_QueueCtrl =============+
| pEventTable:	pEvQ_EvTable	|	reference to event table
| Queue_Count:	int32_t			|	number of items in the queue.
| idxWrite:		int32_t			|	queue write pointer; the index to which the next event posted will be written.
| idxRead:		int32_t			|	queue read pointer; the address that will be read at the next GetEvent() call
+-------------------------------+
| Init()						|	initializes the COMPONENT "event queue", not any specific instance of an event queue.
| Get_Initialized()				|	return the component's initialization status.
| InitEvQ()						|	initializes an instance of an event queue. does NOT clear (or otherwise initialize) the table of queued events; only the metadata in the control structure.
| FlushEvents()					|	clears the current event queue, not by touching the buffer itself, but by resetting the count and read/write pointers.
| PostEvent()					|	add a new event to the event queue. returns success/failure indication.
| GetEvent()					|	pulls the oldest event (FIFO) from the queue. destructive read. returns success/failure indication.
+===============================+

discussion																{
* BASE control structure
* focused on event-queue management


* STRICTLY FIFO. no concept (in this implementation) of priorities
	* to implement priorities, MVP would be to scan the event queue and select the highest-priority event. this would impact read- and write-pointer algorithms (MVP would be to consolidate events after the selected event, so that writes would still add to the end of the queue.)
* only enough data and methods to
	* initialize the queue control.
	* add an event to the event queue.
	* remove an event from the event queue.
	* query the number of elements in the queue.
}
}


event handler															{
+== pEvQ_EvHandlerFunc =========+
| 								|
+-------------------------------+
| pEvQ_EvHandlerFunc()	 		|	Signature for callback associated w/ event queues
+===============================+

}


event handler association												{
Associates an Event ID with a handler.
+== tEvQ_EvHandlerAssoc ============+
| evId: tEvQ_EventID				|	ID of the event with which to associate a handler callback.
| pEvHandler: pEvQ_EvHandlerFunc	|	reference of the event handler callback
+-----------------------------------+
| SetEvHandler()					|	Make an association between an Event ID and its handler.
| GetEvHandler()					|	Retrieve the association between Event ID and handler.
+===================================+

pEvQ_EvHandlerAssoc: tEvQ_EvHandlerAssoc *

}


Event Handler Association table											{
Provides a table of Event Handler Associations.
The table _**must be**_ at least as large as the number of defined for the specific Event Queue (extra elements are ignored).

+== tEvQ_EvHndlrAssocTable =========+
| pEvtHndlrTbl: pEvQ_EvHandlerAssoc	|
| szEvtHandlerTbl: int32_t			|
+-----------------------------------+
| InitEventHandlerTable()			|	initialize the Event Handler Association table
| GetAssocAddr()					|
| SetEvHandler()					|	Make an association between an Event ID and its handler.
| GetEvHandler()					|	Retrieve the association between Event ID and handler.
+===================================+

ptEvQ_EvHndlrAssocTable: tEvQ_EvHndlrAssocTable *
}


event queue (extended)													{
extends tEvQ_QueueCtrl

+== tEvQ_QueueCtrlEx ===================+
| EvQ_Ctrl:		tEvQ_QueueCtrl			|	embedded Event Queue object.
| pHandlers:	ptEvQ_EvHndlrAssocTable	|	reference to Event Handler Association Table object.
+---------------------------------------+
| InitEvQ()								|	initializes an instance of an extended event queue. does NOT clear (or otherwise initialize) the table of queued events, or the Event Handler Association lookup table.
| FlushEvents()							|	clears the current event queue, not by touching the buffer itself, but by resetting the count and read/write pointers.
| GetEvent()							|	pulls the oldest event (FIFO) from the queue. destructive read. returns success/failure indication.
| PostEvent()							|	add a new event to the event queue. returns success/failure indication.
| SetEvHandler()						|	Make an association between an Event ID and its handler.
| GetEvHandler()						|
| HandleNextEvent()						|
+=======================================+
intentionally designed to be a superset of the core control structure.

}

* event handlers
