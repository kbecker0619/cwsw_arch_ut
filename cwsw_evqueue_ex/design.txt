
╔══ EVQUEUE ═════════════╗ 
╟─── Types ──────────────╢
║ tEvQ_QueueCtrl         ║	Queue management; application-specific instantiation
║ tEvQ_EvQueue           ║	Queue for events; application-specific instantiation. pointed to by one member of tEvQ_QueueCtrl
║                        ║
║ tEvQ_ErrorCodes        ║	API return type
║                        ║
╟─── Values ─────────────╢
║ kEvQ_Ev_None           ║	Reserved value for all event lists.
║                        ║
╟─── API ────────────────╢ 
║ Init()                 ║	Initializes the **component**. Standardized API w/ initialization API of all other components of the CWSW Library. Intended for use with `Init(module)` API.
║ InitEvQ()              ║	Initializes the queue management structure. `InitQ(QueueName)` API.
║ FlushEvents()          ║	Clears all events from event queue.
║ Get_Initialized()      ║	Query status of **component** initialization. Intended for use with `Get(module, attribute)` API.
║ PostEvent()            ║	Insert an event into the queue.
║ GetEvent()             ║	Remove an event from the queue. As of this moment, no "peek()" exists.
║                        ║
║                        ║
║                        ║
║                        ║
╟────────────────────────╢ 
╚════════════════════════╝ 


╔══ EVHANDLER ═══════════╗ 
╟─── Types ──────────────╢ 
║ pEvH_EvHandlerFunc     ║	Function pointer for event handlers.
║ tEvH_EvHandler         ║	Association for event to handler. In this implementation, each event has one and only one handler at a time; the handler itself can chain to multiple sub-handlers.
║ pEvH_EvHandler         ║	Pointer to an event handler type. Intended to point to a table of event handlers.
║ tEvH_EvtHandle         ║	"Handle" for the position of a specific event in the event-handler table.
║                        ║
╟─── Values ─────────────╢
║                        ║
╟─── API ────────────────╢ 
║                        ║
║                        ║
║                        ║
╟────────────────────────╢ 
╚════════════════════════╝ 
                           
╔══ NEXTPROTO1.CAN ══════╗ 
╟─── Utility ────────────╢ 
║  proto-eval-base.cin   ║
╟─── MQTT ───────────────╢ 
║  proto-mqtt.cin        ║ 
╟─── Next Proto 1 ───────╢ 
║  proto-next1.cin       ║ 
╟────────────────────────╢ 
╚════════════════════════╝ 
                           


╔══ OLDPROTOS.CAN ═══════╗
╟─── Utility ────────────╢
║  proto-eval-base.cin   ║
╟─── MQTT ───────────────╢
║  proto-mqtt.cin        ║
╟─── AdaptiveLights ─────╢
║  proto-adaplights.cin  ║
╟─── BatteryMgmt ────────╢
║  proto-battmgmt.cin    ║
╟─── Brake ──────────────╢
║  proto-brake.cin       ║
╟─── FwdCollisionWarn ───╢
║  proto-fwdcoll.cin     ║
╟─── ObjectDetection ────╢
║  proto-objdetect.cin   ║
╟─── TireService ────────╢
║  proto-tpms.cin        ║
╟─── Ped. Targets ───────╢
║  proto-pedtargs.cin    ║
╟────────────────────────╢
╚════════════════════════╝

╔══ NEXTPROTO2.CAN ══════╗
╟─── Utility ────────────╢
║  proto-eval-base.cin   ║
╟─── MQTT ───────────────╢
║  proto-mqtt.cin        ║
╟─── Next Proto 2 ───────╢
║  proto-next2.cin       ║
╟────────────────────────╢
╚════════════════════════╝